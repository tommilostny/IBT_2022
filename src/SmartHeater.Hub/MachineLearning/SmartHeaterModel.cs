// This file was auto-generated by ML.NET Model Builder.
// Adjustments by Tomáš Milostný.

using Microsoft.ML.Transforms.TimeSeries;
using SmartHeater.Hub.Providers;

namespace SmartHeater.Hub.MachineLearning;

public class SmartHeaterModel
{
    private readonly IDatabaseService _databaseService;
    private readonly HeatersProvider _heatersProvider;

    public SmartHeaterModel(IDatabaseService databaseService, HeatersProvider heatersProvider)
    {
        _databaseService = databaseService;
        _heatersProvider = heatersProvider;
    }

    #region Consumption
    /// <summary>
    /// Use this method to predict on <see cref="ModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" ModelOutput"/></returns>
    public async Task<ModelOutput> Predict(string heaterIpAddress, ModelInput? input = null, int? horizon = null)
    {
        var mlContext = new MLContext();
        var modelPath = ModelPathFromIP(heaterIpAddress);

        var predEngine = await CreatePredictEngine(mlContext, modelPath);
        var result = predEngine.Predict(input!, horizon);
        predEngine.CheckPoint(mlContext, modelPath);

        return result;
    }

    private async Task<TimeSeriesPredictionEngine<ModelInput, ModelOutput>> CreatePredictEngine(MLContext mlContext, string ipAddress)
    {
        ITransformer mlModel;
        var modelPath = ModelPathFromIP(ipAddress);

        if (File.Exists(modelPath)) //Model is trained, just load it.
        {
            mlModel = mlContext.Model.Load(modelPath, out var _);
        }
        else //Model is not trained, train it with heater temperature history.
        {
            var heater = await _heatersProvider.GetHeaterAsync(ipAddress);
            var tempHistoryData = await _databaseService.ReadTemperatureHistoryAsync(heater);
            mlModel = TrainPipeline(mlContext, tempHistoryData);
        }
        return mlModel.CreateTimeSeriesEngine<ModelInput, ModelOutput>(mlContext);
    }
    #endregion

    #region Training
    private static ITransformer TrainPipeline(MLContext context, IDataView trainData)
    {
        var pipeline = BuildPipeline(context);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    /// build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    private static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline = mlContext.Forecasting.ForecastBySsa(windowSize: 4,
                                                           seriesLength: 12,
                                                           trainSize: 1578240,
                                                           horizon: 10,
                                                           confidenceLevel: 0.95f,
                                                           outputColumnName: @"temperatureDiff",
                                                           inputColumnName: @"temperatureDiff",
                                                           confidenceLowerBoundColumn: @"temperatureDiff_LB",
                                                           confidenceUpperBoundColumn: @"temperatureDiff_UB");
        return pipeline;
    }
    #endregion

    private static string ModelPathFromIP(string ipAddress) => $"SmartHeaterModel_{ipAddress}.zip";
}
