// This file was partially auto-generated by ML.NET Model Builder.
// Adjustments by Tomáš Milostný.

using Microsoft.ML;
using Microsoft.ML.Transforms.TimeSeries;
using SmartHeater.Shared.Static;

namespace SmartHeater.ML;

public static class SmartHeaterModel
{
    public static async Task EnsureTrained(string mlProjectPath, bool overwrite = false)
    {
        if (!overwrite && File.Exists(MLContants.DefaultModelFilePath))
        {
            return;
        }
        if (!File.Exists(MLContants.TrainingFileName))
        {
            var generator = new MLTrainingGenerator();
            await generator.Run(Path.Combine(mlProjectPath, "Data", "B2MBUD01_T_N.csv"));
        }

        var mlContext = new MLContext();
        var data = mlContext.Data.LoadFromTextFile<MLModelInput>(MLContants.TrainingFileName, separatorChar: ';', hasHeader: true);
        var model = TrainPipeline(mlContext, data);

        var predEngine = model.CreateTimeSeriesEngine<MLModelInput, MLModelOutput>(mlContext);
        predEngine.CheckPoint(mlContext, MLContants.DefaultModelFilePath);

        var trainingResult = File.Exists(MLContants.DefaultModelFilePath);
        Console.WriteLine(trainingResult ? "Model is trained." : "Model is NOT trained.");

        //TODO: testing metrics?
    }

    #region Consumption
    /// <summary>
    /// Use this method to predict on <see cref="MLModelInput"/>.
    /// </summary>
    /// <param name="input">model input.</param>
    /// <returns><seealso cref=" MLModelOutput"/></returns>
    public static MLModelOutput Forecast(string heaterIpAddress, MLModelInput? input = null, int horizon = 10, bool saveModelCheckpoint = true)
    {
        var mlContext = new MLContext();
        var modelPath = ModelPathFromIP(heaterIpAddress);

        var predEngine = CreatePredictEngine(mlContext, modelPath);
        var result = predEngine.Predict(input!, horizon);

        if (saveModelCheckpoint)
        {
            predEngine.CheckPoint(mlContext, modelPath);
        }
        return result;
    }

    private static TimeSeriesPredictionEngine<MLModelInput, MLModelOutput> CreatePredictEngine(MLContext mlContext, string modelPath)
    {
        if (!File.Exists(modelPath))
        {
            File.Copy(MLContants.DefaultModelFilePath, modelPath);
        }
        var mlModel = mlContext.Model.Load(modelPath, inputSchema: out var _);
        return mlModel.CreateTimeSeriesEngine<MLModelInput, MLModelOutput>(mlContext);
    }
    #endregion

    #region Training
    private static ITransformer TrainPipeline(MLContext context, IDataView trainData)
    {
        var pipeline = BuildPipeline(context);
        var model = pipeline.Fit(trainData);

        return model;
    }

    /// <summary>
    /// build the pipeline that is used from model builder. Use this function to retrain model.
    /// </summary>
    /// <param name="mlContext"></param>
    /// <returns></returns>
    private static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
    {
        // Data process configuration with pipeline data transformations
        var pipeline = mlContext.Forecasting.ForecastBySsa(windowSize: 4,
                                                           seriesLength: 12,
                                                           trainSize: 1578240,
                                                           horizon: 10,
                                                           confidenceLevel: 0.95f,
                                                           outputColumnName: @"temperatureDiff",
                                                           inputColumnName: @"temperatureDiff",
                                                           confidenceLowerBoundColumn: @"temperatureDiff_LB",
                                                           confidenceUpperBoundColumn: @"temperatureDiff_UB");
        return pipeline;
    }
    #endregion

    private static string ModelPathFromIP(string ipAddress) => $"SmartHeaterModel_{ipAddress}.zip";
}
